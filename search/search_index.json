{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chess Data MySQL chess database CLI tools and machine learning with Rubix ML .","title":"Home"},{"location":"#chess-data","text":"MySQL chess database CLI tools and machine learning with Rubix ML .","title":"Chess Data"},{"location":"ai-training/","text":"AI Training Create the ml/regression/checkmate_king_and_rook_vs_king.rbx file using a prepared dataset. php cli/ml/train/regression.php checkmate_king_and_rook_vs_king fen_100_1646828057.csv","title":"AI Training"},{"location":"ai-training/#ai-training","text":"Create the ml/regression/checkmate_king_and_rook_vs_king.rbx file using a prepared dataset. php cli/ml/train/regression.php checkmate_king_and_rook_vs_king fen_100_1646828057.csv","title":"AI Training"},{"location":"create-json-files/","text":"Create JSON Files The following commands will create a bunch of JSON files in the output folder for further use by other applications like the Chess API . Create the output/autocomplete-events.json file: php cli/json/autocomplete/events.php Create the output/autocomplete-players.json file: php cli/json/autocomplete/players.php Create the output/draw-rate.json file: php cli/json/stats/draw-rate.php Create the output/win-rate-for-black.json file: php cli/json/stats/win-rate-for-black.php Create the output/win-rate-for-white.json file: php cli/json/stats/win-rate-for-white.php","title":"Create JSON Files"},{"location":"create-json-files/#create-json-files","text":"The following commands will create a bunch of JSON files in the output folder for further use by other applications like the Chess API . Create the output/autocomplete-events.json file: php cli/json/autocomplete/events.php Create the output/autocomplete-players.json file: php cli/json/autocomplete/players.php Create the output/draw-rate.json file: php cli/json/stats/draw-rate.php Create the output/win-rate-for-black.json file: php cli/json/stats/win-rate-for-black.php Create the output/win-rate-for-white.json file: php cli/json/stats/win-rate-for-white.php","title":"Create JSON Files"},{"location":"installation/","text":"Installation Setup Clone the chesslablab/chess-data repo into your projects folder. Then cd the chess-data directory and install the Composer dependencies: composer install Create an .env file: cp .env.example .env Update the environment variables in your .env file if necessary: DB_DRIVER=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=chess DB_USERNAME=root DB_PASSWORD= Finally, create the chess database: php cli/db-create.php","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#setup","text":"Clone the chesslablab/chess-data repo into your projects folder. Then cd the chess-data directory and install the Composer dependencies: composer install Create an .env file: cp .env.example .env Update the environment variables in your .env file if necessary: DB_DRIVER=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=chess DB_USERNAME=root DB_PASSWORD= Finally, create the chess database: php cli/db-create.php","title":"Setup"},{"location":"prepare-the-data/","text":"Prepare the Data Should you want to prepare the data for further AI training, make sure the endgames and the games tables have been previously seeded with data. Regression From a FEN Position Prepare the data by playing chess games from a particular FEN position as shown in the example below. php cli/prepare/training/regression/fen.php 10 This command will play 10 random chess games fetched from the endgames table to create a prepared CSV dataset in the dataset/training/regression folder. It is particularly helpful to prepare endgames data. Regression From the Start Position Prepare the data by playing chess games from the start position as shown in the example below. php cli/prepare/training/regression/start.php 10 This command will play 10 random chess games fetched from the games table to create a prepared CSV dataset in the dataset/training/regression folder. It is particularly helpful to prepare games data.","title":"Prepare the Data"},{"location":"prepare-the-data/#prepare-the-data","text":"Should you want to prepare the data for further AI training, make sure the endgames and the games tables have been previously seeded with data.","title":"Prepare the Data"},{"location":"prepare-the-data/#regression-from-a-fen-position","text":"Prepare the data by playing chess games from a particular FEN position as shown in the example below. php cli/prepare/training/regression/fen.php 10 This command will play 10 random chess games fetched from the endgames table to create a prepared CSV dataset in the dataset/training/regression folder. It is particularly helpful to prepare endgames data.","title":"Regression From a FEN Position"},{"location":"prepare-the-data/#regression-from-the-start-position","text":"Prepare the data by playing chess games from the start position as shown in the example below. php cli/prepare/training/regression/start.php 10 This command will play 10 random chess games fetched from the games table to create a prepared CSV dataset in the dataset/training/regression folder. It is particularly helpful to prepare games data.","title":"Regression From the Start Position"},{"location":"seed-the-tables-with-data/","text":"Seed the Tables with Data Tables are loaded using the files contained in the data folder and can be loaded either all at once or file by file. Listed below are some examples of commands to seed the games table with data. Seed the games table with all the files contained in the data/example folder: php cli/seed/games.php data/example \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. \u2713 597 games out of a total of 597 are OK. \u2717 1 games did not pass the validation. \u2713 1824 games out of a total of 1825 are OK. \u2713 3878 games out of a total of 3878 are OK. \u2713 4646 games out of a total of 4646 are OK. \u2717 2 games did not pass the validation. \u2713 2126 games out of a total of 2128 are OK. \u2713 2275 games out of a total of 2275 are OK. \u2713 1218 games out of a total of 1218 are OK. \u2713 827 games out of a total of 827 are OK. \u2717 5 games did not pass the validation. \u2713 1341 games out of a total of 1346 are OK. \u2713 5662 games out of a total of 5662 are OK. \u2713 3444 games out of a total of 3444 are OK. Seed the games table file by file: php cli/seed/games.php data/example/Anand.pgn \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. Seed the games table with your own set of files in the data/games folder: php cli/seed/games.php data/games Please note that all files in the data folder are gitignored except those contained in data/example . Also, the chess games won't be loaded into the database if containing PGN tags other than the ones supported by the tables created in the cli/db-create.php script. If that is the case you may want to remove the unsupported tags as shown in the example below. find . -name '*.pgn' -print0 | xargs -0 sed -i \"/\\[PlyCount .*\\]/d\" Listed below are some examples of commands to seed the endgames table with data. php cli/seed/endgames.php data/endgames Listed below are some examples of commands to seed the openings table with data. php cli/seed/openings.php data/openings","title":"Seed the Tables with Data"},{"location":"seed-the-tables-with-data/#seed-the-tables-with-data","text":"Tables are loaded using the files contained in the data folder and can be loaded either all at once or file by file. Listed below are some examples of commands to seed the games table with data. Seed the games table with all the files contained in the data/example folder: php cli/seed/games.php data/example \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. \u2713 597 games out of a total of 597 are OK. \u2717 1 games did not pass the validation. \u2713 1824 games out of a total of 1825 are OK. \u2713 3878 games out of a total of 3878 are OK. \u2713 4646 games out of a total of 4646 are OK. \u2717 2 games did not pass the validation. \u2713 2126 games out of a total of 2128 are OK. \u2713 2275 games out of a total of 2275 are OK. \u2713 1218 games out of a total of 1218 are OK. \u2713 827 games out of a total of 827 are OK. \u2717 5 games did not pass the validation. \u2713 1341 games out of a total of 1346 are OK. \u2713 5662 games out of a total of 5662 are OK. \u2713 3444 games out of a total of 3444 are OK. Seed the games table file by file: php cli/seed/games.php data/example/Anand.pgn \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. Seed the games table with your own set of files in the data/games folder: php cli/seed/games.php data/games Please note that all files in the data folder are gitignored except those contained in data/example . Also, the chess games won't be loaded into the database if containing PGN tags other than the ones supported by the tables created in the cli/db-create.php script. If that is the case you may want to remove the unsupported tags as shown in the example below. find . -name '*.pgn' -print0 | xargs -0 sed -i \"/\\[PlyCount .*\\]/d\" Listed below are some examples of commands to seed the endgames table with data. php cli/seed/endgames.php data/endgames Listed below are some examples of commands to seed the openings table with data. php cli/seed/openings.php data/openings","title":"Seed the Tables with Data"}]}