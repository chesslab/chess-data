{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chess Data MySQL chess database and CLI tools.","title":"Home"},{"location":"#chess-data","text":"MySQL chess database and CLI tools.","title":"Chess Data"},{"location":"bootstrap-the-database/","text":"Bootstrap the Database The chess database consists of these tables: games , openings and users . The games table is to be seeded with PGN files, the openings table with CSV files, and the users table with fake random generated usernames. games This table can be seeded with the PGN files contained in the data/example folder, and can be loaded either all at once or file by file as it is shown in the examples below. Seed the games table with all the files contained in the data/example folder: docker exec -itu 1000:1000 chess_data_php php cli/seed/games.php data/example \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. \u2713 597 games out of a total of 597 are OK. \u2717 1 games did not pass the validation. \u2713 1824 games out of a total of 1825 are OK. \u2713 3878 games out of a total of 3878 are OK. \u2713 4646 games out of a total of 4646 are OK. \u2717 2 games did not pass the validation. \u2713 2126 games out of a total of 2128 are OK. \u2713 2275 games out of a total of 2275 are OK. \u2713 1218 games out of a total of 1218 are OK. \u2713 827 games out of a total of 827 are OK. \u2717 5 games did not pass the validation. \u2713 1341 games out of a total of 1346 are OK. \u2713 5662 games out of a total of 5662 are OK. \u2713 3444 games out of a total of 3444 are OK. Seed the games table file by file: docker exec -itu 1000:1000 chess_data_php php cli/seed/games.php data/example/Anand.pgn \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. The games table can also be seeded with your own set of PGN files in the data/games folder: docker exec -itu 1000:1000 chess_data_php php cli/seed/games.php data/games Please note that all files in the data folder are gitignored except those contained in data/example . The chess games won't be loaded into the database if containing PGN tags other than the ones supported by the tables created in the cli/db-create.php script. If that is the case you may want to remove the unsupported tags as shown in the example below. find . -name '*.pgn' -print0 | xargs -0 sed -i \"/\\[PlyCount .*\\]/d\" openings This table is seeded with the CSV files contained in the data/openings folder. docker exec -itu 1000:1000 chess_data_php php cli/seed/openings.php data/openings users This is how to seed the users table with fake random generated usernames: docker exec -itu 1000:1000 chess_data_php php cli/seed/users.php 5000","title":"Bootstrap the Database"},{"location":"bootstrap-the-database/#bootstrap-the-database","text":"The chess database consists of these tables: games , openings and users . The games table is to be seeded with PGN files, the openings table with CSV files, and the users table with fake random generated usernames.","title":"Bootstrap the Database"},{"location":"bootstrap-the-database/#games","text":"This table can be seeded with the PGN files contained in the data/example folder, and can be loaded either all at once or file by file as it is shown in the examples below. Seed the games table with all the files contained in the data/example folder: docker exec -itu 1000:1000 chess_data_php php cli/seed/games.php data/example \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. \u2713 597 games out of a total of 597 are OK. \u2717 1 games did not pass the validation. \u2713 1824 games out of a total of 1825 are OK. \u2713 3878 games out of a total of 3878 are OK. \u2713 4646 games out of a total of 4646 are OK. \u2717 2 games did not pass the validation. \u2713 2126 games out of a total of 2128 are OK. \u2713 2275 games out of a total of 2275 are OK. \u2713 1218 games out of a total of 1218 are OK. \u2713 827 games out of a total of 827 are OK. \u2717 5 games did not pass the validation. \u2713 1341 games out of a total of 1346 are OK. \u2713 5662 games out of a total of 5662 are OK. \u2713 3444 games out of a total of 3444 are OK. Seed the games table file by file: docker exec -itu 1000:1000 chess_data_php php cli/seed/games.php data/example/Anand.pgn \u2717 2 games did not pass the validation. \u2713 4142 games out of a total of 4144 are OK. The games table can also be seeded with your own set of PGN files in the data/games folder: docker exec -itu 1000:1000 chess_data_php php cli/seed/games.php data/games Please note that all files in the data folder are gitignored except those contained in data/example . The chess games won't be loaded into the database if containing PGN tags other than the ones supported by the tables created in the cli/db-create.php script. If that is the case you may want to remove the unsupported tags as shown in the example below. find . -name '*.pgn' -print0 | xargs -0 sed -i \"/\\[PlyCount .*\\]/d\"","title":"games"},{"location":"bootstrap-the-database/#openings","text":"This table is seeded with the CSV files contained in the data/openings folder. docker exec -itu 1000:1000 chess_data_php php cli/seed/openings.php data/openings","title":"openings"},{"location":"bootstrap-the-database/#users","text":"This is how to seed the users table with fake random generated usernames: docker exec -itu 1000:1000 chess_data_php php cli/seed/users.php 5000","title":"users"},{"location":"create-json-files/","text":"Create JSON Files The following commands will create JSON output for further use by other applications such as PHP Chess Server . Most played chess openings: php cli/json/most_played_openings.php > most_played_openings.json","title":"Create JSON Files"},{"location":"create-json-files/#create-json-files","text":"The following commands will create JSON output for further use by other applications such as PHP Chess Server . Most played chess openings: php cli/json/most_played_openings.php > most_played_openings.json","title":"Create JSON Files"},{"location":"data-mining/","text":"Data Mining The precondition for data mining is to seed the games table with data. The following commands are to populate the columns suffixed with the word _mine with pre-calculated data for further analysis. With the mine commands, an algorithm is required to process the data in the games table. Please note the difference with the seed commands, which are meant for loading the tables with data. heuristics_mine This column is intended to store a JSON object representing the heuristics in a game. It allows to gather insights about the decisions that have been made to make the moves. The example below populates the heuristics_mine column with heuristics data on a player basis: docker exec -itu 1000:1000 chess_data_php php cli/mine/heuristics.php \"Anand,V\" fen_mine This column is intended to store a text string of comma-separated values representing the chess positions in a game. It allows to search games by piece placement in FEN format. The example below populates the fen_mine column with chess positions in FEN format on a player basis: docker exec -itu 1000:1000 chess_data_php php cli/mine/fen.php \"Anand,V\"","title":"Data Mining"},{"location":"data-mining/#data-mining","text":"The precondition for data mining is to seed the games table with data. The following commands are to populate the columns suffixed with the word _mine with pre-calculated data for further analysis. With the mine commands, an algorithm is required to process the data in the games table. Please note the difference with the seed commands, which are meant for loading the tables with data.","title":"Data Mining"},{"location":"data-mining/#heuristics_mine","text":"This column is intended to store a JSON object representing the heuristics in a game. It allows to gather insights about the decisions that have been made to make the moves. The example below populates the heuristics_mine column with heuristics data on a player basis: docker exec -itu 1000:1000 chess_data_php php cli/mine/heuristics.php \"Anand,V\"","title":"heuristics_mine"},{"location":"data-mining/#fen_mine","text":"This column is intended to store a text string of comma-separated values representing the chess positions in a game. It allows to search games by piece placement in FEN format. The example below populates the fen_mine column with chess positions in FEN format on a player basis: docker exec -itu 1000:1000 chess_data_php php cli/mine/fen.php \"Anand,V\"","title":"fen_mine"},{"location":"installation/","text":"Installation Clone the chesslablab/chess-data repo into your projects folder. Then cd the chess-data directory and create an .env file: cp .env.example .env Run the Docker container in detached mode in the background: docker compose up -d Update the .env file to your specific needs and create the chess database: docker exec -itu 1000:1000 chess_data_php php cli/db-create.php","title":"Installation"},{"location":"installation/#installation","text":"Clone the chesslablab/chess-data repo into your projects folder. Then cd the chess-data directory and create an .env file: cp .env.example .env Run the Docker container in detached mode in the background: docker compose up -d Update the .env file to your specific needs and create the chess database: docker exec -itu 1000:1000 chess_data_php php cli/db-create.php","title":"Installation"}]}